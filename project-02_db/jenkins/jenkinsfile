pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS_ID = credentials('e2664105-b64b-4ea9-bb6e-8c9346a71fa8')
        SONARQUBE_SERVER_URL = 'http://192.168.48.141:9000/'
        SONARQUBE_TOKEN = credentials('sonarqube')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/nasim103/devops-project.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    try {
                        // Switching to Docker directory
                        dir('project-02_db/docker') {
                            sh 'ls -l'
                            sh 'echo Building Docker Image'
                            sh 'docker build -t my-mysql:latest .'
                        }
                    } catch (Exception e) {
                        echo "Error during build: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    } finally {
                        echo "Build stage finished"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        sh 'echo Testing....'
                        sh 'docker run --rm my-mysql:latest mysql -t'
                    } catch (Exception e) {
                        echo "Error during test: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    } finally {
                        echo "Test stage finished"
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    try {
                        withSonarQubeEnv('MySonarQubeServer') {
                            sh """
                            sonar-scanner \
                            -Dsonar.projectKey=project3 \
                            -Dsonar.sources=./project-02_db \
                            -Dsonar.host.url=${SONARQUBE_SERVER_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                            """
                        }
                    } catch (Exception e) {
                        echo "Error during SonarQube analysis: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    } finally {
                        echo "SonarQube analysis finished"
                    }
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh 'docker login -u $DOCKER_USER -p $DOCKER_PASS'
                            sh 'docker tag my-mysql:latest nasim1039/my-mysql:latest'
                            sh 'docker push nasim1039/my-mysql:latest'
                            sh 'docker logout'
                        }
                    } catch (Exception e) {
                        echo "Error during Docker push: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    } finally {
                        echo "Push stage finished"
                    }
                }
            }
        }

        stage('Deploy on EC2') {
            steps {
                script {
                    try {
                        dir('project-02_db/ansible') {
                            sshagent(['75179a70-96c4-4432-8da1-8de671aef93d']) {
                                sh 'ansible-playbook deploy.yml -i aws_ec2.yml'
                            }
                        }
                    } catch (Exception e) {
                        echo "Error during deployment: ${e}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    } finally {
                        echo "Deploy stage finished"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            cleanWs()
        }
        success {
            echo 'Deployment successfully completed'
        }
        failure {
            echo 'Deployment failed'
        }
    }
}
